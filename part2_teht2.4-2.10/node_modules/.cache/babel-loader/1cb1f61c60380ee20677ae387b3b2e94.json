{"ast":null,"code":"var _jsxFileName = \"/home/atte/WebMob2021-workspace/part2/part2_teht2.4-2.10/src/App.js\";\nimport React from 'react';\nimport axios from 'axios'; // teht 2.9 Reminder, part 6\n// At the moment, the new reminders added to the list are not sent \n// to the server. Change the app so that its state is synchronized with the server state.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reminder = ({\n  key,\n  name,\n  timestamp,\n  deleteReminderButtonFunction\n}) => {\n  console.log(`rendering reminder... reminder id ${key}`);\n  let thisId = {\n    key\n  };\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [timestamp, \": \", name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteReminderButtonFunction(thisId),\n      children: \"Poista\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Reminder;\n\nconst ReminderForm = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: props.addReminderFunction,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Sis\\xE4lt\\xF6: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: props.nameToAdd,\n          onChange: props.handleReminderChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"P\\xE4iv\\xE4ys: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: props.dateToAdd,\n          onChange: props.handleDateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Lis\\xE4\\xE4 muistutus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ReminderForm;\n\nclass App extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.handleReminderChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        newName: event.target.value\n      });\n    };\n\n    this.handleDateChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        newDate: event.target.value\n      });\n    };\n\n    this.addReminder = event => {\n      event.preventDefault(); // teht 2.5:  eri polut sen mukaan,\n      // onko muistiinpano jo lisätty\n      // toinen mahdollinen ratkaisu some-metodilla:\n      // this.state.reminders.some(r => r.name === this.state.newName)\n\n      if (this.state.reminders.map(reminder => reminder.name).includes(this.state.newName)) {\n        // muistiinpano on jo lisätty\n        console.log('nappia painettu, muistiinpano on jo listalla');\n        alert('Ei voida lisätä muistutusta listaan, koska se on jo lisätty!');\n      } else {\n        console.log('debug else-lohko');\n        const newReminderObject = {\n          timestamp: this.state.newDate,\n          name: this.state.newName\n        }; // Tehtävä 2.9 -- nyt uudet muistiinpanot tallennetaankin palvelimelle\n\n        axios.post('http://localhost:3001/reminders', newReminderObject).then(response => {\n          this.setState({\n            reminders: this.state.reminders.concat(response.data),\n            newName: ''\n          });\n        });\n      }\n    };\n\n    this.deleteReminder = props => {\n      return () => {\n        axios.delete(`http://localhost:3001/reminders/${props.id}`).then(console.log(`delete ok... deleted reminder with id ${props.id}`)); // Ladataan päivitetty lista, josta yksi muistiinpano poistettiin\n\n        axios.get('http://localhost:3001/reminders').then(response => {\n          console.log('loaded the updated list after deleting an item');\n          this.setState({\n            reminders: response.data\n          });\n        });\n      }; // const url = `http://localhost:3001/reminders/1`\n      // // axios.delete(url)\n      //     .then(\n      //         console.log('delete ok')\n      //     )\n      // axios\n      //     .get('http://localhost:3001/reminders')\n      //     .then(response => {\n      //         console.log('promise fulfilled')\n      //         this.setState({ reminders: response.data })\n      //     })\n    };\n\n    this.state = {\n      reminders: [],\n      newName: '',\n      newDate: ''\n    };\n    console.log('constructor');\n  } // teht 2.8 -- haetaan tiedot palvelimelta\n  // tämä componentDidMount() on elinkaarimetodi, jota käytetään käynnistymään\n  // silloin, kun komponentti on ladattu onnistuneesti\n\n\n  componentDidMount() {\n    console.log('did mount');\n    axios.get('http://localhost:3001/reminders').then(response => {\n      console.log('promise fulfilled');\n      this.setState({\n        reminders: response.data\n      });\n    });\n  }\n\n  render() {\n    console.log('render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Muistutukset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReminderForm, {\n        addReminderFunction: this.addReminder,\n        nameToAdd: this.newName,\n        handleReminderChange: this.handleReminderChange,\n        handleDateChange: this.handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"T\\xE4m\\xE4nhetkiset muistutukset:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.reminders.map(reminder => /*#__PURE__*/_jsxDEV(Reminder, {\n          name: reminder.name,\n          timestamp: reminder.timestamp,\n          deleteReminderButtonFunction: this.deleteReminder\n        }, reminder.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 59\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Reminder\");\n$RefreshReg$(_c2, \"ReminderForm\");","map":{"version":3,"sources":["/home/atte/WebMob2021-workspace/part2/part2_teht2.4-2.10/src/App.js"],"names":["React","axios","Reminder","key","name","timestamp","deleteReminderButtonFunction","console","log","thisId","ReminderForm","props","addReminderFunction","nameToAdd","handleReminderChange","dateToAdd","handleDateChange","App","Component","constructor","event","target","value","setState","newName","newDate","addReminder","preventDefault","state","reminders","map","reminder","includes","alert","newReminderObject","post","then","response","concat","data","deleteReminder","delete","id","get","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios'\n\n\n// teht 2.9 Reminder, part 6\n\n// At the moment, the new reminders added to the list are not sent \n// to the server. Change the app so that its state is synchronized with the server state.\n\nconst Reminder = ({ key, name, timestamp, deleteReminderButtonFunction }) => {\n\n    console.log(`rendering reminder... reminder id ${key}`)\n\n    let thisId = {key}\n\n    return (\n\n        <li>{timestamp}: {name} <button onClick={deleteReminderButtonFunction(thisId)}>Poista</button></li>\n    )\n}\n\n\nconst ReminderForm = (props) => {\n\n    return (\n        <div>\n            <form onSubmit={props.addReminderFunction}>\n                <div>\n                    Sisältö: <input value={props.nameToAdd}\n                        onChange={props.handleReminderChange} />\n                </div>\n                <div>\n                    Päiväys: <input value={props.dateToAdd}\n                        onChange={props.handleDateChange} />\n                </div>\n                <div>\n                    <button type=\"submit\">Lisää muistutus</button>\n                </div>\n            </form>\n        </div>\n    )\n\n}\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            reminders: [],\n            newName: '',\n            newDate: ''\n        }\n        console.log('constructor')\n    }\n\n    // teht 2.8 -- haetaan tiedot palvelimelta\n    // tämä componentDidMount() on elinkaarimetodi, jota käytetään käynnistymään\n    // silloin, kun komponentti on ladattu onnistuneesti\n    componentDidMount() {\n        console.log('did mount')\n        axios\n            .get('http://localhost:3001/reminders')\n            .then(response => {\n                console.log('promise fulfilled')\n                this.setState({ reminders: response.data })\n            })\n    }\n\n    handleReminderChange = (event) => {\n        console.log(event.target.value)\n        this.setState({ newName: event.target.value })\n    }\n\n    handleDateChange = (event) => {\n        console.log(event.target.value)\n        this.setState({ newDate: event.target.value })\n\n    }\n\n    addReminder = (event) => {\n        event.preventDefault()\n\n        // teht 2.5:  eri polut sen mukaan,\n        // onko muistiinpano jo lisätty\n        // toinen mahdollinen ratkaisu some-metodilla:\n        // this.state.reminders.some(r => r.name === this.state.newName)\n        if (this.state.reminders.map(reminder => reminder.name).includes(this.state.newName)) {\n\n            // muistiinpano on jo lisätty\n            console.log('nappia painettu, muistiinpano on jo listalla')\n            alert('Ei voida lisätä muistutusta listaan, koska se on jo lisätty!')\n\n        } else {\n            console.log('debug else-lohko')\n\n            const newReminderObject = {\n                timestamp: this.state.newDate,\n                name: this.state.newName\n            }\n\n            // Tehtävä 2.9 -- nyt uudet muistiinpanot tallennetaankin palvelimelle\n            axios.post('http://localhost:3001/reminders', newReminderObject)\n                .then(response => {\n                    this.setState({\n                        reminders: this.state.reminders.concat(response.data),\n                        newName: ''\n                    })\n                })\n\n\n        }\n    }\n\n    // Teht 2.10 - muistiinpanojen poistaminen\n    deleteReminder = (props) => {\n\n        return () => {\n\n            axios.delete(`http://localhost:3001/reminders/${props.id}`)\n            .then(console.log(`delete ok... deleted reminder with id ${props.id}`));\n\n            // Ladataan päivitetty lista, josta yksi muistiinpano poistettiin\n            axios\n            .get('http://localhost:3001/reminders')\n            .then(response => {\n                console.log('loaded the updated list after deleting an item')\n                this.setState({ reminders: response.data })\n            })\n\n        }\n\n\n\n\n        // const url = `http://localhost:3001/reminders/1`\n\n        // // axios.delete(url)\n        //     .then(\n        //         console.log('delete ok')\n        //     )\n\n           \n\n        // axios\n        //     .get('http://localhost:3001/reminders')\n        //     .then(response => {\n        //         console.log('promise fulfilled')\n        //         this.setState({ reminders: response.data })\n        //     })\n\n\n    }\n\n    render() {\n        console.log('render')\n\n\n        return (\n            <div>\n                <h2>Muistutukset</h2>\n                <ReminderForm addReminderFunction={this.addReminder} nameToAdd={this.newName}\n                    handleReminderChange={this.handleReminderChange} handleDateChange={this.handleDateChange} />\n\n\n                <h2>Tämänhetkiset muistutukset:</h2>\n                <ul>\n                    {this.state.reminders.map(reminder => <Reminder key={reminder.id} name={reminder.name} timestamp={reminder.timestamp}\n                        deleteReminderButtonFunction={this.deleteReminder} />)}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}