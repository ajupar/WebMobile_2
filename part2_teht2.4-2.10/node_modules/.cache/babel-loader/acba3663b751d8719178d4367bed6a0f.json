{"ast":null,"code":"var _jsxFileName = \"/home/atte/WebMob2021-workspace/part2/part2_teht2.4-2.10/src/App.js\";\nimport React from 'react'; // teht 2.7 Reminder, part 4\n// If the whole application is in one component, refactor it by dividing it into several components. \n// The state should remain in the root component, however.\n// Separating two components from the application is enough here. Good candidates include \n// the code for viewing a invidual reminder entry and the form for adding a new entry.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reminder = ({\n  name,\n  timestamp\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [name, \" \", timestamp]\n  }, name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Reminder;\n\nconst addReminder = ({\n  event\n}) => {\n  event.preventDefault(); // teht 2.5:  eri polut sen mukaan,\n  // onko muistiinpano jo lisätty\n  // toinen mahdollinen ratkaisu some-metodilla:\n  // this.state.reminders.some(r => r.name === this.state.newName)\n\n  if (this.state.reminders.map(reminder => reminder.name).includes(this.state.newName)) {\n    // muistiinpano on jo lisätty\n    console.log('nappia painettu, muistiinpano on jo listalla');\n    alert('Ei voida lisätä muistutusta listaan, koska se on jo lisätty!');\n  } else {\n    const newReminderObject = {\n      name: this.state.newName,\n      timestamp: this.state.newDate\n    };\n    const tempReminders = this.state.reminders.concat(newReminderObject);\n    this.setState({\n      reminders: tempReminders,\n      newName: '',\n      newDate: ''\n    });\n    console.log('nappia painettu');\n    console.log(event.target);\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleReminderChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        newName: event.target.value\n      });\n    };\n\n    this.handleDateChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        newDate: event.target.value\n      });\n    };\n\n    this.state = {\n      reminders: [{\n        name: 'Osta metrilakua torilta',\n        timestamp: \"15.3.2021, klo 12\"\n      }],\n      newName: '',\n      newDate: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Muistutukset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.addReminder,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Sis\\xE4lt\\xF6: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.newName,\n            onChange: this.handleReminderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"P\\xE4iv\\xE4ys: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.newDate,\n            onChange: this.handleDateChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Lis\\xE4\\xE4 muistutus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"T\\xE4m\\xE4nhetkiset muistutukset:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.reminders.map(reminder => /*#__PURE__*/_jsxDEV(Reminder, {\n          name: reminder.name,\n          timestamp: reminder.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 59\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reminder\");","map":{"version":3,"sources":["/home/atte/WebMob2021-workspace/part2/part2_teht2.4-2.10/src/App.js"],"names":["React","Reminder","name","timestamp","addReminder","event","preventDefault","state","reminders","map","reminder","includes","newName","console","log","alert","newReminderObject","newDate","tempReminders","concat","setState","target","App","Component","constructor","props","handleReminderChange","value","handleDateChange","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\n// teht 2.7 Reminder, part 4\n\n// If the whole application is in one component, refactor it by dividing it into several components. \n// The state should remain in the root component, however.\n\n// Separating two components from the application is enough here. Good candidates include \n// the code for viewing a invidual reminder entry and the form for adding a new entry.\n\n\nconst Reminder = ({ name, timestamp }) => {\n\n    return (\n\n        <li key={name}>{name} {timestamp}</li>\n    )\n\n\n}\n\nconst addReminder = ({ event }) => {\n    event.preventDefault()\n\n    // teht 2.5:  eri polut sen mukaan,\n    // onko muistiinpano jo lisätty\n    // toinen mahdollinen ratkaisu some-metodilla:\n    // this.state.reminders.some(r => r.name === this.state.newName)\n    if (this.state.reminders.map(reminder => reminder.name).includes(this.state.newName)) {\n\n        // muistiinpano on jo lisätty\n        console.log('nappia painettu, muistiinpano on jo listalla')\n        alert('Ei voida lisätä muistutusta listaan, koska se on jo lisätty!')\n\n    } else {\n        const newReminderObject = {\n            name: this.state.newName,\n            timestamp: this.state.newDate\n        }\n\n        const tempReminders = this.state.reminders.concat(newReminderObject)\n\n        this.setState({\n            reminders: tempReminders,\n            newName: '',\n            newDate: ''\n        })\n\n        console.log('nappia painettu')\n        console.log(event.target)\n\n    }\n}\n\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            reminders: [\n                {\n                    name: 'Osta metrilakua torilta',\n                    timestamp: \"15.3.2021, klo 12\"\n                }\n            ],\n            newName: '',\n            newDate: ''\n        }\n    }\n        handleReminderChange = (event) => {\n            console.log(event.target.value)\n            this.setState({ newName: event.target.value })\n        }\n\n    handleDateChange = (event) => {\n        console.log(event.target.value)\n        this.setState({ newDate: event.target.value })\n\n    }\n\n    render() {\n\n\n        return (\n            <div>\n                <h2>Muistutukset</h2>\n                <form onSubmit={this.addReminder}>\n                    <div>\n                        Sisältö: <input value={this.state.newName}\n                            onChange={this.handleReminderChange} />\n                    </div>\n                    <div>\n                        Päiväys: <input value={this.state.newDate}\n                            onChange={this.handleDateChange} />\n                    </div>\n\n                    <div>\n                        <button type=\"submit\">Lisää muistutus</button>\n                    </div>\n                </form>\n                <h2>Tämänhetkiset muistutukset:</h2>\n                <ul>\n                    {this.state.reminders.map(reminder => <Reminder name={reminder.name} timestamp={reminder.timestamp} />)}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}